@Service
public class ReCaptchaResponseVerifier {

  @Resource
  private Environment environment;

  private static final Logger LOGGER = LoggerFactory.getLogger(ReCaptchaResponseVerifier.class);

  @Async
  public Future<GoogleCaptchaResponseData> isCaptchaResponseValid(String captchaResponse) throws InterruptedException,
      ExecutionException {

    LOGGER.debug(" Validating captcha {}", captchaResponse);

    if (captchaResponse.isEmpty()) {
      GoogleCaptchaResponseData response = new GoogleCaptchaResponseData();
      response.setSuccess(false);
      response.setErrorCodes("The \"I am not a robot\" genie says you didn't verify, please do so.");
      return new AsyncResult<GoogleCaptchaResponseData>(response);
    }

    AsyncRestTemplate restTemplate = new AsyncRestTemplate();

    Map<String, String> uriVariables = new HashMap<String, String>();


    ListenableFuture<ResponseEntity<GoogleCaptchaResponseData>> futureResponse = restTemplate.postForEntity(
        "https://www.google.com/recaptcha/api/siteverify", buildCaptachRequest(captchaResponse),
        GoogleCaptchaResponseData.class);

    GoogleCaptchaResponseData response;
    response = futureResponse.get().getBody();

    return new AsyncResult<GoogleCaptchaResponseData>(response);

  }

  private HttpEntity<GoogleCaptchaRequestData> buildCaptachRequest(String captchaResponse) {
    GoogleCaptchaRequestData request = new GoogleCaptchaRequestData();

    request.setResponse(captchaResponse);
    request.setSecret(environment.getProperty("google.recaptcha.secret"));

    return new HttpEntity<GoogleCaptchaRequestData>(request);
  }}
